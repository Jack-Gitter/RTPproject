#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, queue

class Receiver:
    
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.sender_sn = 0; # sender sequence number
        self.receiver_sn = 0; # receiver sequence number 
        self.ack_id = 0 # ack number 
        self.received_data = []

        self.data_buffer = queue.PriorityQueue()

        self.remote_host = None
        self.remote_port = None


    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                # load the message received 
                msg = json.loads(data.decode('utf-8'))

                if msg['id'] not in self.received_data:

                    self.received_data.append(msg['id'])

                    self.data_buffer.put((msg['sn'], msg))

                    # if this is true, then we want to pop the item, and loop thru the q like that
                    while(len(self.data_buffer.queue[0][1]['data'].encode('utf-8')) + self.sender_sn == self.data_buffer.queue[0][1]['sn']):
                        data = self.data_buffer.get()[1]
                        self.log('printing data with sn ' + str(data['sn']))
                        self.sender_sn = data['sn'] 
                        self.log("Received data message %s" % data['data'])
                        print(data['data'], end='', flush=True)
                        if self.data_buffer.qsize() <= 0:
                            break

                    self.send({ "type": "ack", "sn": msg['sn'], "id":self.ack_id})
                    self.ack_id+=1

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()

