#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, queue, hashlib

class Receiver:
    
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.sender_sn = 0; # sender sequence number
        self.receiver_sn = 0; # receiver sequence number 
        self.ack_id = 0 # ack number 
        self.received_data = []
        self.processed_sns = []

        self.data_buffer = queue.PriorityQueue()

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send_ack(self, ack):
        self.send(ack)
        self.ack_id+=1

    def grab_remote_host(self, addr):
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

    def process_msgs_in_order(self):
        if self.data_buffer.qsize() <= 0:
            return
        msg = self.data_buffer.queue[0][1]
        while(len(msg['data'].encode('utf-8')) + self.sender_sn == msg['sn']):
            msg = self.data_buffer.get()[1]
            self.processed_sns.append(msg['sn'])
            self.log('printing data with sn ' + str(msg['sn']))
            self.sender_sn = msg['sn'] 
            self.log("Received data message %s" % msg['data'])
            print(msg['data'], end='', flush=True)
            if self.data_buffer.qsize() <= 0:
                break
            msg = self.data_buffer.queue[0][1]

    def is_valid_check_sum(self, msg):
        h = hashlib.blake2b()
        for key, value in msg.items():
            if key != 'checksum' and key != 'sn' and key != 'data' and key != 'type':
                return False
            if key == 'checksum':
                continue
            else:
                h.update(str(value).encode('utf-8'))

        return h.hexdigest() == msg['checksum']

    def add_check_sum(self, msg):
        h = hashlib.blake2b()
        for key, value in msg.items():
            if key == 'checksum':
                continue
            elif key == 'sn' or key == 'id':
                h.update(str(value).encode('utf-8'))
            else:
                h.update(value.encode('utf-8'))

        msg['checksum'] = h.hexdigest()

    def is_valid_JSON(self, msg):
        try:
            json.loads(msg)
        except:
            return False
        return True

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)
                

                if not self.is_valid_JSON(data): 
                    continue

                msg = json.loads(data.decode('utf-8'))

                if not self.is_valid_check_sum(msg):
                    continue

                # Grab the remote host/port if we don't alreadt have it
                self.grab_remote_host(addr)

                if msg['sn'] not in self.received_data:

                    self.received_data.append(msg['sn'])

                    self.data_buffer.put((msg['sn'], msg))

                self.process_msgs_in_order()
                ack = { "type": "ack", "sn": msg['sn'], "id":self.ack_id}
                self.add_check_sum(ack)
                self.send_ack(ack)

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()

