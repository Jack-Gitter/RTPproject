#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, queue

class Receiver:
    
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.sender_sn = 0; # sender sequence number
        self.receiver_sn = 0; # receiver sequence number 
        self.ack_id = 0 # ack number 
        self.received_data = []

        self.data_buffer = queue.PriorityQueue()

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send_ack(self, msg):
        if len(msg['data'].encode('utf-8')) + self.sender_sn == msg['sn']:
            self.send({ "type": "ack", "sn": msg['sn'], "id":self.ack_id})
        else:
            self.send({ "type": "ack", "sn": self.sender_sn, "id":self.ack_id})

        self.ack_id+=1

    def grab_remote_host(self, addr):
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

    def process_msgs_in_order(self):
        msg = self.data_buffer.queue[0][1]
        while(len(msg['data'].encode('utf-8')) + self.sender_sn == msg['sn']):
            msg = self.data_buffer.get()[1]
            self.log('printing data with sn ' + str(msg['sn']))
            self.sender_sn = msg['sn'] 
            self.log("Received data message %s" % msg['data'])
            print(msg['data'], end='', flush=True)
            if self.data_buffer.qsize() <= 0:
                break
            msg = self.data_buffer.queue[0][1]

    def check_and_put_data(self, msg):
        for tup in self.data_buffer.queue:
            for key, value in tup:
                if key == 'id':
                    continue
                if msg[key] != value:
                    return 

        self.data_buffer.put((msg['sn'], msg))


    def check_and_print(self, msg):
        if len(msg['data'].encode('utf-8')) + self.sender_sn == msg['sn']:
            self.sender_sn = msg['sn'] 
            self.log("Received data message %s" % msg['data'])
            print(msg['data'], end='', flush=True)


    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                self.grab_remote_host(addr)

                # load the message received 
                msg = json.loads(data.decode('utf-8'))

                if msg['id'] not in self.received_data:

                    self.log("we have received a data message!")

                    self.received_data.append(msg['id'])

                    #self.check_and_put_data(msg)

                    #self.process_msgs_in_order()
                    self.check_and_print(msg)

                    # somehow regulate the amount of acks we send back
                    self.send_ack(msg)

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()

