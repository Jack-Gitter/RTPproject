#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

# Effectively packet size that we are going to be sending
DATA_SIZE = 1311 #1375

# class that controls sending messages
class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.usable_window_size = 4 # max number of packets that can be out in the network
        self.num_out_packets = 0 # number of packets out in the network from sender
        self.receiver_sn = 0 # receiver sequence number
        self.sender_sn = 0; # sender sequence number
        self.RTT = 1 # default starting RTT
        self.alpha = .875 # used to calculate on the fly RTO/RTT
        self.ack_numbers = []; # used to monitor duplicate acks
        self.window = {} # used to keep track of packets we sent out
        self.time_window = {} # used to keep track of packets we sent out with RTO

    # Prints a message out to the conosle
    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    # Sends a message to the receiver
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    # makes sure that after the last message is sent, we have received all of the acks for outstanding messages
    def ensure_all_acks_received(self, data):
        if len(data) == 0:
            if self.num_out_packets != 0:
                self.waiting = True
                return True
            self.log("All done!")
            sys.exit(0)

    # moves the window forward 
    def advance_window(self, ack):
        json_ack = json.loads(ack)
        for sn in list(self.window.keys()):
            if sn == json_ack['sn']:
                del self.window[sn]
                del self.time_window[sn]

    # adds a check sum to the data sent
    def add_check_sum(self, msg):
        h = hashlib.blake2b()
        for key, value in msg.items():
            if key == 'checksum':
                continue
            elif key == 'sn' or key == 'id':
                h.update(str(value).encode('utf-8'))
            else:
                h.update(value.encode('utf-8'))
        msg['checksum'] = h.hexdigest()

    # determines if JSON received or sent is valid, not corrupted 
    def is_valid_JSON(self, msg):
        try:
            json.loads(msg)
        except:
            return False
        return True

    # ensures that an ack received is not mangled
    def is_valid_check_sum(self, msg):
        json_ack = json.loads(msg)
        h = hashlib.blake2b()
        for key, value in json_ack.items():
            if key != 'sn' and key != 'checksum' and key != 'id' and key != 'type' and key != 'data':
                return False
            if key == 'checksum':
                continue
            else:
                h.update(str(value).encode('utf-8'))

        return h.hexdigest() == json_ack['checksum']

    # sends a message to the receiver and creates the json message with correct header/data fields
    def send_msg(self, data):
        self.sender_sn += len(data.encode('utf-8'))
        msg = { "type": "msg", "data": data, "sn": self.sender_sn }
        self.add_check_sum(msg)
        self.log("Sending message '%s'" % msg)
        self.send(msg)
        self.num_out_packets+=1

    # adds a message sent to our current window
    def add_to_window(self, data):
        msg = { "type": "msg", "data": data, "sn": self.sender_sn + len(data.encode('utf-8'))}
        self.window[msg['sn']] = msg

    # adds a message sent to our current time window
    def add_to_time_window(self, data):
        msg = { "type": "msg", "data": data, "sn": self.sender_sn + len(data.encode('utf-8')), "time": time.time()}
        self.time_window[msg['sn']] = msg

    # determines if the ack received was duplicated by the network
    def is_unique_ack(self, ack):
        json_ack = json.loads(ack)
        return json_ack['id'] not in self.ack_numbers and json_ack['sn'] in self.window

    # documents the ack we received
    def document_ack(self, ack):
        json_ack = json.loads(ack)
        self.log("Received message '%s'" % ack)
        self.ack_numbers.append(json_ack['id'])
        self.num_out_packets-=1
        if self.num_out_packets < self.usable_window_size:
            self.waiting = False
            self.usable_window_size+=1


    # used to retransmit packets that have an expired RTO
    def check_RTO_and_retransmit(self):
        for packet in list(self.time_window.values()):
            if time.time() - packet['time'] > self.RTT * 1.5: 
                self.usable_window_size/=1.5
                self.time_window[packet['sn']]['time'] = time.time()
                status = self.retransmit_packet(packet['sn'])
                if status == -1:
                    return

    # actually retransmits the packets that have expired in the window
    def retransmit_packet(self, sn):
            for key, packet in list(self.window.items()):
                if key == sn:
                    packet_copy = packet.copy()
                    self.add_check_sum(packet_copy)
                    self.send(packet_copy)
                    if self.num_out_packets >= self.usable_window_size:
                        self.waiting = True
                        return -1

    # calculates on the fly RTT/RTO times
    def change_RTT_time(self, ack):
        self.RTT = self.alpha * self.RTT + (1-self.alpha) * (time.time() - self.time_window[json.loads(ack)['sn']]['time'])

    # runs the sender
    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    msg = k.decode('utf-8')

                    if not self.is_valid_JSON(msg) or not self.is_valid_check_sum(msg):
                        continue

                    if (self.is_unique_ack(msg)):
                        self.document_ack(msg)
                        self.change_RTT_time(msg)
                        self.advance_window(msg)

                        #self.log("we have received a unique ack and are changing the window size")
                        #self.log("the new window size is " + str(self.usable_window_size))

                elif conn == sys.stdin:

                    data = sys.stdin.read(DATA_SIZE)

                    if self.ensure_all_acks_received(data):
                        break

                    if self.num_out_packets == self.usable_window_size or self.num_out_packets > self.usable_window_size:
                        self.waiting = True
                        break

                    self.add_to_window(data)
                    self.add_to_time_window(data)
                    self.send_msg(data)

                    if self.num_out_packets == self.usable_window_size or self.num_out_packets > self.usable_window_size:
                        self.waiting = True

            self.check_RTO_and_retransmit()

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
