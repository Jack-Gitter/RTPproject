#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

# Effectively packet size that we are going to be sending
DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.window_size = 4 # max number of packets that can be out in the network
        self.num_out_packets = 0 # number of packets out in the network from sender
        self.receiver_sn = 0 # receiver sequence number
        self.sender_sn = 0; # sender sequence number
        self.data_number = 0
        self.ack_numbers = []; # used to monitor duplicate acks
        self.window = {}
        self.time_window = {}

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def ensure_all_acks_received(self, data):
        if len(data) == 0:
            if self.num_out_packets != 0:
                self.waiting = True
                return True
            self.log("All done!")
            sys.exit(0)

    def advance_window(self, ack):
        json_ack = json.loads(ack)
        for sn in list(self.window.keys()):
            if sn == json_ack['sn']:
                del self.window[sn]
                del self.time_window[sn]
                self.log("we have just removed data message with sn " + str(sn) + " from the window. the new window is ")
        for sn in list(self.time_window.keys()):
            self.log(str(sn))
            self.log(str(self.time_window[sn]['time']))
        for sn in list(self.window.keys()):
            self.log(str(sn))

    def send_msg(self, data):
        self.sender_sn += len(data.encode('utf-8'))
        msg = { "type": "msg", "data": data, "sn": self.sender_sn, "id": self.data_number}
        self.log("Sending message '%s'" % msg)

        self.send(msg)
        self.data_number+=1
        self.num_out_packets+=1

    def add_to_window(self, data):
        msg = { "type": "msg", "data": data, "sn": self.sender_sn + len(data.encode('utf-8')), "id": self.data_number}
        self.window[msg['sn']] = msg

    def add_to_time_window(self, data):
        msg = { "type": "msg", "data": data, "sn": self.sender_sn + len(data.encode('utf-8')), "id": self.data_number, "time": time.time()}
        self.time_window[msg['sn']] = msg

    def is_unique_ack(self, ack):
        json_ack = json.loads(ack)
        return json_ack['id'] not in self.ack_numbers and json_ack['sn'] in self.window

    def document_ack(self, ack):
        json_ack = json.loads(ack)
        self.log("Received message '%s'" % ack)
        self.ack_numbers.append(json_ack['id'])
        self.num_out_packets-=1
        self.waiting = False


    def check_RTO_and_retransmit(self):
        for packet in list(self.time_window.values()):
            if time.time() - packet['time'] > 1: 
                self.time_window[packet['sn']]['time'] = time.time()
                status = self.retransmit_packet(packet['sn'])
                if status == -1:
                    return

    def retransmit_packet(self, sn):
            # need to update the time array
            for key, packet in list(self.window.items()):
                if key == sn:
                    self.data_number+=1
                    packet['id'] = self.data_number
                    self.log("we are resending ----- " + str(packet))
                    self.send(packet)
                    if self.num_out_packets == self.window_size:
                        self.waiting = True
                        return -1

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]
            # its getting there, we're not waiting long enough for an ack back, then no connection or something?
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    msg = k.decode('utf-8')

                    # If the ack we have received is not a duplicate
                    if (self.is_unique_ack(msg)):
                        self.document_ack(msg)
                        self.advance_window(msg)

                elif conn == sys.stdin:

                    data = sys.stdin.read(DATA_SIZE)

                    if self.ensure_all_acks_received(data):
                        break

                    if self.num_out_packets == self.window_size:
                        self.log("are we ever here? -------------------")
                        self.waiting = True
                        break

                    self.add_to_window(data)
                    self.add_to_time_window(data)
                    self.send_msg(data)
                    self.log("our out packet count is at ------------ " + str(self.num_out_packets))
                    self.log("our sender window looks like")
                    for key, value in self.window.items():
                        self.log(str(key))

                    self.log("our time window looks like")
                    for key, value in self.time_window.items():
                        self.log(str(key))

                    if self.num_out_packets == self.window_size:
                        self.waiting = True


            self.check_RTO_and_retransmit()

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
