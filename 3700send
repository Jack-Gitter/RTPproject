#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

# Effectively packet size that we are going to be sending
DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.window_size = 2
        self.sent_packets = 0
        self.receiver_sn = 0
        self.sn = 0;
        self.acd_packets = []

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    msg = k.decode('utf-8')
                    json_msg = json.loads(msg)

                    if json_msg['id'] not in self.acd_packets:
                        self.log("Received message '%s'" % msg)
                        self.acd_packets.append(json_msg['id'])
                        self.sent_packets-=1
                        self.waiting = False


                    # fix this logic here, when do we really want to decrement? keep in mind dupe akcs
                    # both intentional and unintentional

                elif conn == sys.stdin:
                    data = sys.stdin.read(DATA_SIZE)

                    if len(data) == 0:
                        self.log("All done!")
                        sys.exit(0)

                    self.sn += len(data.encode('utf-8'))
                    msg = { "type": "msg", "data": data, "sn": self.sn}
                    self.log("Sending message '%s'" % msg)

                    self.send(msg)
                    self.sent_packets+=1

                    if self.sent_packets == self.window_size:
                        self.waiting = True

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
